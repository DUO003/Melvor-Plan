##@tool
###一个管理计次的变量组和 时效性的变量,
#extends Node
#"""
#时效变量,返回true和false
#计次变量,返回次数
#"""
#class_name 计次储存
#
###用于存放几次变量的东西
#static var 计次变量:Dictionary = {
	#日 = {}, ##储存BOOL的日变量
	#周 = {}, 
	#月 = {}, 
	#不过期变量 = {}, 
	#不过期变量计次 = {}, 
	#日计次 = {"期限": - 1}, 
	#失效日计次储存={},#用于临时放置过期的变量
	#周计次 = {"期限": - 1}, 
	#失效周计次储存={},#用于临时放置过期的变量
	#月计次 = {"期限": - 1},
	#失效月计次储存={},#用于临时放置过期的月计次变量
#}
#
###设置日变量 
#static func 设置_日时效变量(value:String) :
	#计次变量.日[value] = int(时间.获取到现在所经历的天数()) #北京时间.年*10000+北京时间.月*100+北京时间.日*1
	#return 计次变量.日[value]
###获取日变量	
#static func 获取_日时效变量(value:String)->bool:
	#if (value in 计次变量.日) == true:
		#if 计次变量.日[value] == int(时间.获取到现在所经历的天数()):
			#return true
	#return false
#
###设置一周时效的变量 
#static func 设置_周时效变量(value:String)->void :
	#计次变量.周[value] =int(时间.获取到现在所经历的周数())
###获取周变量
#static func 获取_周时效变量(value:String)->bool:
	#if (value in 计次变量.周) == true:
		#if 计次变量.周[value]== int(时间.获取到现在所经历的周数()): 
			#return true
	#return false
	#
###设置一个月时效的变量 
#static func 设置_月时效变量(value:String)->void :
	#计次变量.月[value] = int(时间.获取到现在所经历的月数())#北京时间.年*10000+北京时间.月*100
###获取月变量
#static func 获取_月时效变量(value:String)->bool:
	#if (value in 计次变量.月) == true:	
		#if 计次变量.月[value] == int(时间.获取到现在所经历的月数()):
			#return true
	#return false
#
#"""
#不过期变量
#"""
#static func 设置_不过期变量(value:String)->void :
	#计次变量.不过期变量[value] = true
	#
#static func 获取_不过期变量(value:String)->bool:
	#if (value in 计次变量.不过期变量) == true:
		#return true
	#return false
	#
#static func 清除_不过期变量(计次的变量:String)->void :#清除全局次变量
	#计次变量.不过期变量.erase(计次的变量)
#
#
#"""
#计次变量,不会过期
#"""
#static func 增加_计次变量_不过期变量(计次的变量:String,增加的值:int=1)->void :
	#if (计次的变量 in 计次变量.不过期变量计次) == false:
		#计次变量.不过期变量计次[计次的变量] = 增加的值
	#else :
		#计次变量.不过期变量计次[计次的变量] += 增加的值
		#
#static func 获取_计次变量_不过期变量(计次的变量:String)->int:
	#if (计次的变量 in 计次变量.不过期变量计次) == true:
		#return 计次变量.不过期变量计次[计次的变量]
	#return 0
	#
#static func 清除_计次变量_不过期变量(计次的变量:String)->void :#清除全局次变量
	#计次变量.不过期变量计次.erase(计次的变量)
##
#"""
#计次变量,会过期,时效一天
#"""
###增加每日时效的计次变量
#static func 增加_计次变量_日时效(计次的变量:String,增加的值:int=1)->void :
	#if 计次变量.日计次["期限"] != int(时间.获取到现在所经历的天数()):
		##临时储存可回潮
		#计次变量.失效日计次储存=计次变量.日计次
		##重置
		#计次变量.日计次 = {"期限":int(时间.获取到现在所经历的天数())}
		#计次变量.日计次[计次的变量] = 增加的值
	#elif 计次变量.日计次["期限"] == int(时间.获取到现在所经历的天数()):
		#if (计次的变量 in 计次变量.日计次) == true:
			#计次变量.日计次[计次的变量] += 增加的值
		#else :
			#计次变量.日计次[计次的变量] = 增加的值
###获取每日变量时效的变量次数	
#static func 获取_计次变量_日时效(计次的变量:String)->int:
	#if (计次的变量 in 计次变量.日计次) == true:
		#if 计次变量.日计次["期限"] == int(时间.获取到现在所经历的天数()):
			#return 计次变量.日计次[计次的变量]
		#else:#回潮储存
			#计次变量.失效日计次储存=计次变量.日计次
	#return 0
#
#"""
#计次变量,会过期,时效7天
#"""
###增加每周变量时效的变量次数
#static func 增加_计次变量_周时效(计次的变量:String,增加的值:int=1)->void :
	#if  int(时间.获取到现在所经历的周数()) != 计次变量.周计次["期限"] :
		##储存上周
		#计次变量.失效周计次储存=计次变量.周计次
		##清空重置
		#计次变量.周计次 = {"期限":int(时间.获取到现在所经历的周数())}
		#计次变量.周计次[计次的变量] = 增加的值	
	#elif int(时间.获取到现在所经历的周数()) == 计次变量.周计次["期限"]:	
		#if (计次的变量 in 计次变量.周计次) == true:
			#计次变量.周计次[计次的变量] += 增加的值
		#else :
			#计次变量.周计次[计次的变量] = 增加的值
###获取每周变量时效的变量次数
#static func 获取_计次变量_周时效(计次的变量:String)->int:
	#if (计次的变量 in 计次变量.周计次) == true:
		#if int(时间.获取到现在所经历的周数()) == 计次变量.周计次["期限"] :
			#return 计次变量.周计次[计次的变量]
		#else:
		##储存上周
			#计次变量.失效周计次储存=计次变量.周计次
	#return 0
	#
#"""
#计次变量,会过期,时效30天
#"""
#
###增加每个月变量时效的变量次数
#static func 增加_计次变量_月时效(计次的变量:String,增加的值:int=1)->void :
	#if 计次变量.月计次["期限"] != int(时间.获取到现在所经历的月数()):
		##储存上月
		#计次变量.失效月计次储存=计次变量.月计次
		##重置
		#计次变量.月计次 = {"期限":int(时间.获取到现在所经历的月数())}
		#计次变量.月计次[计次的变量] = 增加的值
	#elif 计次变量.月计次["期限"] == int(时间.获取到现在所经历的月数()):
		#if (计次的变量 in 计次变量.月计次) == true:
			#计次变量.月计次[计次的变量] += 增加的值
		#else :
			#计次变量.月计次[计次的变量] = 增加的值		
###获取每个月时效的变量次数
#static func 获取_计次变量_月时效(计次的变量:String)->int:
	#if (计次的变量 in 计次变量.月计次) == true:
		#if 计次变量.月计次["期限"] == int(时间.获取到现在所经历的月数()):
			#return 计次变量.月计次[计次的变量]
		#else:
		##储存上月
			#计次变量.失效月计次储存=计次变量.月计次
	#return 0
	#
#"""
#过期获取
#"""	
###获取过期的日时效变量
#static func 失效_日_计次变量_获取():
	#return 计次变量.失效日计次储存
###获取过期的周时效变量
#static func 失效_周_计次变量_获取():
	#return 计次变量.失效周计次储存
###获取过期的月时效变量
#static func 失效_月_计次变量_获取():
	#return 计次变量.失效月计次储存
#
#
#static func _static_init() -> void:##只有在打开tool,且在工程内才会输出
	#调试.打印("工程调试专用.tools下会执行计次变量类!")
	#pass
	#
###运行游戏后 在gamemode执行这里
#static func 开始运行():
	#OS.alert("运行游戏会执行!")
