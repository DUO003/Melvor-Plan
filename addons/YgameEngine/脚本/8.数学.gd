##基于数学库,随机，权重等
extends Node
class_name 引擎数学

## 向下取整
##[codeblock]
## 引擎.数学.向下取整()  
##[/codeblock]
func 向下取整(浮点数):
	return floor(浮点数)

## 向上取整
##[codeblock]
## 引擎.数学.向上取整()  
##[/codeblock]
func 向上取整(_浮点数):
	return ceil(_浮点数)

## 初始化随机数生成器（使用当前时间作为种子）
##[codeblock]
## 引擎.数学.随机_打乱种子()  # 初始化随机种子
##[/codeblock]
func 随机_打乱种子() -> void:
	randomize()

## 生成指定范围内的随机浮点数
## [br]参数:[br]
##   - 最小浮点数: 最小值（包含）[br]
##   - 最大浮点数: 最大值（包含）
## [br]返回:[br]
##   - 范围内的随机浮点数
##[codeblock]
## var 随机值 = 引擎.数学.随机_取范围浮点数(1.5, 3.5)
##[/codeblock]
func 随机_取范围浮点数(最小浮点数: float, 最大浮点数: float) -> float:
	return randf_range(最小浮点数, 最大浮点数)


## 生成0到1之间的随机浮点数（包含0和1）
## [br]返回:[br]
##   - 0到1之间的随机浮点数
##[codeblock]
## var 随机值 = 引擎.数学.随机_取0到1的浮点数()
##[/codeblock]
func 随机_取0到1的浮点数() -> float:
	return randf()
	

## 生成0到指定值之间的随机整数（包含0和指定值）
## [br]参数:[br]
##   - 最大整数: 最大值（包含）[br]
## [br]返回:[br]
##   - 0到最大整数之间的随机整数
##[codeblock]
## var 随机数 = 引擎.数学.随机_取0到最大整数(10)  # 生成0-10之间的随机整数
##[/codeblock]
func 随机_取0到最大整数(最大整数: int) -> int:
	return randi_range(0, 最大整数)

## 生成指定范围内的随机整数（包含最小值和最大值）
## [br]参数:[br]
##   - 最小整数: 最小值（包含）[br]
##   - 最大整数: 最大值（包含）
## [br]返回:[br]
##   - 范围内的随机整数
##[codeblock]
## var 随机数 = 引擎.数学.随机_取范围整数(5, 15)
##[/codeblock]
func 随机_取范围整数(最小整数: int, 最大整数: int) -> int:
	return randi_range(最小整数, 最大整数)

## 生成指定范围内的随机整数角度（闭区间 [最小角度, 最大角度]）
## [br]参数:[br]
##   - 最小角度: 最小值（包含），默认0[br]
##   - 最大角度: 最大值（包含），默认360[br]
## [br]返回:[br]
##   - 指定范围内的随机整数角度
##[codeblock]
## var 角度 = 引擎.数学.随机_取角度整数()      # 默认生成0-360之间的随机整数
## var 角度 = 引擎.数学.随机_取角度整数(-90)  # 生成-90-360之间的随机整数
## var 角度 = 引擎.数学.随机_取角度整数(-90, 90)  # 生成-90-90之间的随机整数
##[/codeblock]
func 随机_取角度整数(最小角度: int=0, 最大角度:int=360) -> int:
	return randi_range(最小角度, 最大角度)

## 生成指定范围内的随机浮点数角度（闭区间 [最小角度, 最大角度]）
## [br]参数:[br]
##   - 最小角度: 最小值（包含），默认0.0[br]
##   - 最大角度: 最大值（包含），默认360.0[br]
## [br]返回:[br]
##   - 指定范围内的随机浮点数角度
##[codeblock]
## var 角度 = 引擎.数学.随机_取角度浮点数()      # 默认生成0.0-360.0之间的随机浮点数
## var 角度 = 引擎.数学.随机_取角度浮点数(-90.0)  # 生成-90.0-360.0之间的随机浮点数
## var 角度 = 引擎.数学.随机_取角度浮点数(-45.5, 45.5)  # 生成-45.5-45.5之间的随机浮点数
##[/codeblock]
func 随机_取角度浮点数(最小角度: float = 0.0, 最大角度: float = 360.0) -> float:
	return randf_range(最小角度, 最大角度)


## 从数组中随机选择一个字符串
## [br]参数:[br]
##   - 字符串数组: 待选择的字符串数组[br]
## [br]返回:[br]
##   - 随机选中的字符串，若数组为空则返回空字符串
##[codeblock]
## var 随机颜色 = 引擎.数学.随机_取字符串(["红", "绿", "蓝"])
##[/codeblock]
func 随机_取字符串(字符串数组: Array) -> String:
	if 字符串数组.is_empty():  # 使用更简洁的 empty() 方法
		return ""
	return 字符串数组[随机_取0到最大整数(字符串数组.size() - 1)]  # 复用已有随机函数


## 按权重从数组中随机选择一个元素
## [br]参数:[br]
##   - 物品列表: 格式为 [[值1, 权重1], [值2, 权重2], ...]，值可以是任意类型[br]
## [br]返回:[br]
##   - 随机选中的值（类型与数组中一致），若列表为空或权重无效返回 null
##[codeblock]
## var 结果 = 引擎.数学.随机_权重选择([["苹果", 10], ["香蕉", 20], ["橙子", 5]])  # 香蕉概率最高
##[/codeblock]
func 随机_权重选择(物品列表: Array) -> Variant:
	if 物品列表.is_empty():
		push_error("错误：权重数组为空")
		return null
	
	var 总权重 = 0
	for 物品 in 物品列表:
		if 物品.size() < 2:
			push_error("错误：物品格式错误，应为 [值, 权重]")
			return null
		总权重 += 物品[1]
	
	if 总权重 <= 0:
		push_error("错误：总权重为0，无法选择")
		return null
	
	var 随机值 = 随机_取范围整数(1, 总权重)
	var 累加权重 = 0
	for 物品 in 物品列表:
		累加权重 += 物品[1]
		if 随机值 <= 累加权重:
			return 物品[0]  # 返回原始类型（可能是字符串、数字或其他）
	
	push_error("未知错误：权重选择失败")  # 理论上不会执行到这里
	return null
