@tool
extends EquipmentData
class_name 物品装备
var 基础数值 = {
	# 主手装备（包含攻击距离、攻速）
	"长剑": { # 平衡型
		"基础攻击": 50,
		"基础血量": 6,
		"攻击距离": 75,
		"攻速": 50
	},
	"斧头": { # 高攻低攻速
		"基础攻击": 70,
		"基础血量": 4,
		"攻击距离": 60,
		"攻速": 35
	},
	"匕首": { # 高攻速短距离
		"基础攻击": 30,
		"基础魔法": 8,
		"攻击距离": 40,
		"攻速": 80
	},
	"战锤": { # 超高攻无次属性
		"基础攻击": 100,
		"攻击距离": 55,
		"攻速": 20
	},
	"矛": { # 长距离平衡型
		"基础攻击": 50,
		"基础血量": 12,
		"攻击距离": 90,
		"攻速": 45
	},
	"弓": { # 远程高攻
		"基础攻击": 70,
		"攻击距离": 100,
		"攻速": 45
	},
	"法杖": { # 魔法侧重
		"基础魔法": 65,
		"基础攻击": 10,
		"攻击距离": 70,
		"攻速": 50
	},
	"魔杖": { # 高魔法高攻速
		"基础魔法": 80,
		"攻击距离": 50,
		"攻速": 75
	},
	"手弩": { # 中距离快攻速
		"基础攻击": 40,
		"基础血量": 15,
		"攻击距离": 85,
		"攻速": 65
	},
	"火枪": { # 超远程低攻速
		"基础攻击": 80,
		"基础魔法": 8,
		"攻击距离": 100,
		"攻速": 30
	},
	# 副手装备（按本质类型附加属性）
	"盾牌": { # 本质防具，含减伤
		"基础血量": 80, # 主属性>70，无次属性
		"减伤": 35
	},
	"乐器": { # 本质武器，含攻击距离/攻速
		"基础魔法": 55, # 魔法辅助
		"基础攻击": 10,
		"攻击距离": 60,
		"攻速": 65
	},
	"卷轴": { # 本质武器，含攻击距离/攻速
		"基础魔法": 75, # 主属性>70，无次属性（魔法爆发）
		"攻击距离": 80,
		"攻速": 40
	},
	"箭袋": { # 本质饰品，含固定属性
		"基础攻击": 8,
		"基础魔法": 5,
		"回蓝": 1 # 固定属性（四选一）
	},
	"护手": { # 本质防具，含减伤
		"基础血量": 50,
		"基础攻击": 5,
		"减伤": 25
	},
	"手套": { # 本质饰品，含固定属性
		"基础攻击": 12,
		"基础血量": 8,
		"暴击": 1 # 固定属性（四选一）
	},
	# 头盔装备（防具类，含减伤）
	"头盔": { # 通用防御
		"基础血量": 75, # 主属性>70，无次属性
		"减伤": 30
	},
	"盗贼帽": { # 轻防御+魔法辅助
		"基础魔法": 50,
		"基础血量": 15,
		"减伤": 25
	},
	"法师帽": { # 魔法侧重+低防御
		"基础魔法": 50, 
		"基础血量": 45,
		"减伤": 25
	},
	# 衣服装备（防具类，含减伤）
	"重甲": { # 超高防御
		"基础血量": 90, # 主属性>70，无次属性
		"减伤": 40
	},
	"轻甲": { # 平衡防御+攻击
		"基础血量": 60,
		"基础攻击": 12,
		"减伤": 35
	},
	"法袍": { # 魔法侧重+轻防御
		"基础魔法": 60,
		"基础血量": 50,
		"减伤": 35
	},
	# 裤子装备（防具类，含减伤）
	"腿甲": { # 高防御
		"基础血量": 70,
		"基础攻击": 8,
		"减伤": 35
	},
	"法裤": { # 魔法辅助+中防御
		"基础魔法": 55,
		"基础血量": 18,
		"减伤": 30
	},
	"裤子": { # 通用平衡
		"基础血量": 50,
		"基础魔法": 10,
		"减伤": 30
	},

	# 鞋子装备（防具类，含减伤）
	"靴子": { # 防御+少量攻击
		"基础血量": 65,
		"基础攻击": 10,
		"减伤": 25
	},
	"鞋子": { # 重防御
		"基础血量": 70,
		"减伤": 30
	},
	"法鞋": { # 魔法侧重+低防御
		"基础魔法": 60,
		"基础血量": 15,
		"减伤": 25
	},

	# 饰品装备（含固定属性）
	"项链": { # 回血辅助
		"基础魔法": 75, # 主属性>70，无次属性
		"基础攻击": 0,
		"基础血量": 0,
		"回血": 1 # 固定属性（四选一）
	},
	"光环": { # 回蓝辅助
		"基础攻击": 65,
		"基础血量": 12,
		"回蓝": 1 # 固定属性（四选一）
	},

	# 披挂装备（含固定属性）
	"披风": { # 闪避辅助
		"基础血量": 60,
		"基础魔法": 15,
		"闪避": 1 # 固定属性（四选一）
	},
	"宠物": { # 暴击辅助
		"基础攻击": 70,
		"基础魔法": 8,
		"暴击": 1 # 固定属性（四选一）
	},
# 戒指装备（含固定属性）
	"戒指": { # 回血辅助
		"基础魔法": 65,
		"基础血量": 15,
		"回血": 1 # 固定属性（四选一）
	}}
@export_group("职业属性")
## "分类"或"职业">"类型"
##"分类"可选项["武器","护甲","饰品"]决定物品检索,定义装备逻辑.武器仅限主手单件 副手可选护甲或饰品分类
@export_enum("武器","护甲","饰品") var 分类: String = "武器"
##"类型"装备的具体对应装备槽,部分固定属性由"职业"与"类型"决定
@export_enum("长剑", "斧头", "匕首", "战锤", "矛", "弓", "法杖", "魔杖", "手弩", "火枪",
"盾牌", "乐器", "卷轴", "箭袋","护手", "手套",
"头盔", "盗贼帽", "法师帽","重甲", "轻甲", "法袍","腿甲", "法裤", "裤子","靴子", "鞋子", "法鞋",
"项链", "光环","披风", "宠物","戒指")
var 类型: String = "长剑":# 默认值为"长剑"，值直接是字符串
	set(值):
		类型=值
		type = 类型
##"职业"可选项["战士","法师","射手"]部分固定属性由"职业"与"类型"决定
@export_enum("战士","法师","射手") var 职业: String = "战士"
@export var 蓝图名称: String="默认蓝图"

@export_group("装备属性")
@export var 附魔: Dictionary[String, int] = {}
## 装备阶级 每1级对应5级游历系统等级,最高20.
@export var 阶级: int = 1
@warning_ignore("incompatible_ternary")
@export var 耐久上限:int=0
@export var 耐久:int=0
@export var 血量:int=0
@export var 攻击:int=0
@export var 魔法:int=0

@export var 回血:int=0
@export var 回蓝:int=0
@export var 闪避:int=0
@export var 暴击:int=0
func _init():
	type = "装备"
	  # 覆盖父类的默认值 "ANY"
func 覆盖更新(新分类=分类,新类型=类型,新职业=职业,新阶级=阶级):
	分类 = 新分类
	类型 = 新类型
	type = "装备"
	职业 = 新职业
	阶级 = 新阶级
	@warning_ignore("incompatible_ternary")
	var 计算耐久上限 = int((200 if 阶级 <= 2 else 200 + (阶级 - 2) * (50 + 阶级 * 5)) * (0.8 if 职业 == "战士" else 1))
	if 耐久上限 == 0:# 只在原属性为0时更新
		耐久上限 = 计算耐久上限
	if 耐久 == 0:
		耐久 = 耐久上限
	if 血量 == 0:
		血量 = 定义血量()
	if 攻击 == 0:
		攻击 = 定义攻击()
	if 魔法 == 0:
		魔法 = 定义魔法()
	if 回血 == 0:
		回血 = 基础数值[类型].get("回血", 0)
	if 回蓝 == 0:
		回蓝 = 基础数值[类型].get("回蓝", 0)
	if 闪避 == 0:
		闪避 = 基础数值[类型].get("闪避", 0)
	if 暴击 == 0:
		暴击 = 基础数值[类型].get("暴击", 0)
func 测试攻击():
	# 循环遍历阶级1到20
	for 级 in range(1, 21):
		阶级 = 级  # 更新当前阶级变量
		# 分别打印当前的职业、阶级、类型（每个阶级单独打印一行）
		类型 = "魔杖"
		职业 = "法师"
		print("%s：%s,攻击:%s	魔法:%s"%[阶级,类型,定义攻击(),定义魔法()])
		类型 = "法杖"
		职业 = "法师"
		print("%s：%s,攻击:%s	魔法:%s"%[阶级,类型,定义攻击(),定义魔法()])
		#类型 = "重甲"
		#职业 = "战士"
		#print("%s：%s,攻击:%s	血量:%s"%[阶级,类型,定义攻击(),定义血量()])
		#类型 = "轻甲"
		#职业 = "射手"
		#print("%s：%s,攻击:%s	血量:%s"%[阶级,类型,定义攻击(),定义血量()])
		#类型 = "法袍"
		#职业 = "法师"
		#print("%s：%s,攻击:%s	血量:%s"%[阶级,类型,定义攻击(),定义血量()])
		#职业 = "战士"
		#类型 = "战锤"
		#print("%s：%s,攻击:"%[阶级,类型],定义攻击())
		#类型 = "长剑"
		#print("%s：%s,攻击:"%[阶级,类型],定义攻击())
		#类型 = "匕首"
		#print("%s：%s,攻击:"%[阶级,类型],定义攻击())
		#print("职业：%s，阶级：%s，类型：%s,攻击:"%[职业,阶级,类型],定义攻击())
	

func 属性测试():
	print("===== 物品装备属性 =====")
	print("物品类型:", type)
	print("物品名称:", item_name)
	
	# 需要检查的属性列表（分组管理）
	var 属性组 = {
		"【职业属性】": [
			{"名称": "分类", "值": 分类},
			{"名称": "类型", "值": 类型},
			{"名称": "职业", "值": 职业}
		],
		"【装备属性】": [
			{"名称": "阶级", "值": 阶级},
			{"名称": "耐久上限", "值": 耐久上限},
			{"名称": "耐久", "值": 耐久},
			{"名称": "血量", "值": 血量},
			{"名称": "攻击", "值": 攻击},
			{"名称": "魔法", "值": 魔法},
			{"名称": "回血", "值": 回血},
			{"名称": "回蓝", "值": 回蓝},
			{"名称": "闪避", "值": 闪避},
			{"名称": "暴击", "值": 暴击}
		]
	}
	
	var 零值属性 = []  # 收集值为0的属性名称
	
	# 遍历打印各属性组
	for 组名 in 属性组:
		print("\n", 组名)
		for 属性 in 属性组[组名]:
			if str(属性.值) != str(0):
				printt(属性.名称+":",str(属性.值))
			else:
				零值属性.append(属性.名称)
	
	# 打印附魔属性
	print("\n【附魔属性】")
	if 附魔 == {}:
		print("无附魔")
	else:
		# 检查附魔属性中的0值（如果附魔是键值对字典）
		for 键 in 附魔:
			if 附魔[键] == 0:
				零值属性.append("附魔:" + 键)
			else:
				printt(键, ":", 附魔[键])
	
	# 最后打印所有值为0的属性
	print("\n值为0的属性:", 零值属性)
	print("\n======================")
# 基础攻击计算（20阶满成长参考：战士10000，法师8000，射手12000）
# 成长速度：法师<战士<射手，成长值0时为0
func 定义攻击():
	var 成长值 = 基础数值[类型].get("基础攻击", 0)
	print("测试成长值",成长值)
	if 成长值 == 0:
		return 0
	var 成长加成# 成长加成：直接用成长值（0-100）放大差距
	var 职业倍率# 职业倍率：拉开职业差距
	if 职业 == "法师":
		成长加成 = 成长值/290.0
		职业倍率 = 0.9  # 低倍率
	elif 职业 == "战士":
		成长加成 = 成长值/280.0
		职业倍率 = 0.8  # 最低倍率
	elif 职业 == "射手":
		成长加成 = 成长值/270.0
		职业倍率 = 1.2  # 最高倍率
	var 阶级系数 = (1.2+0.1*成长加成)**阶级*min((成长值+100+20*阶级)/(22-阶级),150)
	return int(阶级系数 * 职业倍率)


# 基础血量计算（20阶满成长参考：战士500000，射手450000，法师400000）
# 成长速度：法师<射手<战士，成长值0时为0
func 定义血量():
	var 成长值 = 基础数值[类型].get("基础血量", 0)
	if 成长值 == 0:
		return 0
	var 成长加成# 成长加成：直接用成长值（0-100）放大差距
	var 职业倍率# 职业倍率：拉开职业差距
	if 职业 == "法师":
		成长加成 = 成长值/270.0
		职业倍率 = 1  # 最低倍率
	elif 职业 == "战士":
		成长加成 = 成长值/250.0
		职业倍率 = 1.2  # 最高倍率
	elif 职业 == "射手":
		成长加成 = 成长值/260.0
		职业倍率 = 1.05  # 中间倍率
	var 阶级系数 = (1.2+0.1*成长加成)**阶级*min((成长值+500+50*阶级)/(22-阶级),750)
	return int(阶级系数 * 职业倍率)


# 基础魔法计算（20阶满成长参考：法师100000，战士/射手50000）
# 成长速度：战士=射手<法师，成长值0时为0
func 定义魔法():
	var 成长值 = 基础数值[类型].get("基础魔法", 0)
	if 成长值 == 0:
		return 0
	var 成长加成# 成长加成：直接用成长值（0-100）放大差距
	var 职业倍率# 职业倍率：拉开职业差距
	if 职业 == "法师":
		成长加成 = 成长值/250.0# 最高倍率
		职业倍率 = 1.2  
	elif 职业 == "战士" or 职业=="射手":
		成长加成 = 成长值/270.0
		职业倍率 = 1  # 最低倍率
	var 阶级系数 = (1.2+0.1*成长加成)**阶级*min((成长值+50+30*阶级)/(22-阶级),120)
	return int(阶级系数 * 职业倍率)


# 攻速计算（攻击间隔，成长值0时最慢，20阶满成长参考：0.3秒）
# 仅受成长值和轻微阶级影响，成长值0时为0（无普攻）
func 定义攻速():
	var 成长值 = 基础数值[类型].get("攻速", 0)
	if 成长值 == 0:
		return 0.0  # 无普攻
	# 阶级影响微弱（20阶比1阶快50%）
	var 阶级加速 = 1 - (阶级 - 1) / 19.0 * 0.5
	# 成长值主导（100成长比0成长快80%）
	var 成长加速 = 0.2 + (成长值 / 100) * 0.8  # 0.2-1.0
	# 基础间隔3秒，最终间隔=基础×阶级加速×(1-成长加速)
	var 攻速间隔 = 3.0 * 阶级加速 * (1 - 成长加速)
	return round(攻速间隔 * 10) / 10  # 保留1位小数


# 攻击距离计算（函数化成长，无max强制，自然符合区间）
func 定义攻击距离():
	var 成长值 = 基础数值[类型].get("攻击距离", 0)
	if 成长值 == 0:
		return 0  # 无距离（特殊装备）
	var 距离 = 0
	if 职业 == "战士":
		# 成长公式：50（基础） + 成长值×1 → 50成长对应100（50+50×1）
		距离 = 50 + int(成长值 * 0.5)
	elif 职业 == "射手":
		# 成长公式：300（基础） + 成长值×2
		距离 = 300 + 成长值 * 2
	elif 职业 == "法师":
		# 成长公式：250（基础） + 成长值×2.5
		距离 = 250 + int(成长值 * 2.5)
	return 距离


# 减伤计算（成长值0时为0，职业倍率差异化）
func 定义减伤():
	var 成长值 = 基础数值[类型].get("减伤", 0)
	if 成长值 == 0:
		return 0
	var 倍率 = 1.0 if 职业 == "战士" else 0.95
	var 减伤 = 成长值 * 倍率
	return int(减伤)  # 向下取整

# 装备时调用
func equipped(_装备栏: String) -> void:
	初始化.玩家单例.装备来源属性.append(self)
# 脱装备时调用
func unequipped(_装备栏: String) -> void:
	if 初始化.玩家单例.装备来源属性.has(self):
		初始化.玩家单例.装备来源属性.erase(self)
