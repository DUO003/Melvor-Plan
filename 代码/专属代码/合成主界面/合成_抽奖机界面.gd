extends Control
var 灵感等级=1
var 灵感等级精通=0
var 灵感需求=-1
var 定向选项="长剑"
var 研究费用=0
var 费用概率=100
var icon

var 研究动画播放中:bool=false
var 研究中:bool=false
var 动画包显示支持数组=[]
var 动画显示页码=0

var 缓存序号: int
var 缓存中间值: float #实现动画效果,变量唯一所以同时不可播放多个动画
func _ready():
	富文本()
	%研究.pressed.connect(研究)
	%定向选择.pressed.connect(初始化.无功能方法)
	%主菜单.pressed.connect(func(): 初始化.切换场景())
	%研究进度条.更新进度(-1)
	%蓝色图纸.visible=false
	icon=梅表格.装备蓝图[0].find("icon")
func 加载信息():
	灵感等级=初始化.梅存档["手工"].get("灵感等级",1)
	灵感等级精通=初始化.梅存档["手工"].get("灵感等级精通",0)
	灵感需求=初始化.结算升级("手工","灵感等级",true)
	定向选项="长剑"
	研究费用=初始化.梅存档["手工"].get("研究费用",0)
func 富文本():
	加载信息()
	%蓝图纸数量.text=格式化数量(初始化.检查背包物品数量("蓝图纸"))
	%黄图纸数量.text=格式化数量(初始化.检查背包物品数量("黄图纸"))
	%"文本区".text="[b]蓝图抽取说明[/b]
70%获得残缺蓝图，制作一定数量后转化灵感等级精通
21%获得UP类型的装备蓝图 重复给予大量灵感等级精通
8%获得[b]未拥有[/b]的特殊蓝图 全收集补偿黄图纸*10
特等奖 初始1%获得图纸包 （40次保底）
研究费用抽取时"+str(费用概率)+"%+10,零点重置为免费,最大160.
---- ---- ---- ---- 分界线 ---- ---- ---- ----
当获蓝图等级 T"+str(int(ceil(灵感等级/5.0)))+"
当前灵感等级："+str(灵感等级)+"（"+str(灵感等级精通)+"/"+str(灵感需求)+"）
当前定向选项 "+定向选项+"
当前研究费用："+str(研究费用)
	#测试抽奖([0.7, 0.21, 0.08])
func 格式化数量(数量:int) -> String:
	if 数量 > 99999:# 如果数量超过99999
		return "99999"
	return "%05d" % 数量# 否则使用字符串格式化，不足5位前面补0
func 研究():
	if 研究中:
		引擎.屏幕.滚动提示("点的太快了","手工提示")
		return
	if not 研究动画播放中:
		%蓝色图纸.visible=false
	研究中=true
	加载信息()
	if 初始化.检查背包物品数量("蓝图纸")>=研究费用:
		var 对照数组 = ["残缺蓝图","装备蓝图","特殊蓝图","蓝图包"]
		var 奖品 = 抽奖([0.7, 0.21, 0.08])
		var 阶级条件: Array=[]
		var 蓝图包=["标准骑士"]
		for i in range(1, int(ceil(灵感等级/5.0)) + 1):
			阶级条件.append(str(i))
		var 蓝图池: Array
		if 对照数组[奖品]=="残缺蓝图" or 对照数组[奖品]=="装备蓝图":
			蓝图池=筛选符合条件蓝图([],[定向选项],[],阶级条件)
		elif 对照数组[奖品]=="特殊蓝图":
			蓝图池=筛选符合条件蓝图([],[],[],阶级条件,["特殊"])
		else :
			蓝图包.shuffle()
			蓝图包=蓝图包[0]
			蓝图池=筛选符合条件蓝图([],[],[],阶级条件,[蓝图包])
		#print(对照数组[奖品],":",蓝图池)
		#print("阶级条件:",阶级条件)
		蓝图池.shuffle()
		var 补间实例 = create_tween()
		缓存序号= -1  # 初始值设为-1表示未初始化
		缓存中间值= 0.0
		var 时间=1.2
		补间实例.tween_method(
			func(中间值: float):
				%研究进度条.更新进度(中间值)
				var 差值 = abs(中间值 - 缓存中间值)
				if 差值 >= 0.05/时间 or 缓存序号 == -1:
					缓存序号 = randi() % 蓝图池.size()
					缓存中间值 = 中间值
					%"研究配方贴图".texture=load(梅表格.装备蓝图[蓝图池[缓存序号]][icon])
					%研究配方名.text = str(梅表格.装备蓝图[蓝图池[缓存序号]][0]),0.0,1.0,时间).set_ease(Tween.EASE_IN_OUT).set_trans(Tween.TRANS_QUAD)
		await 补间实例.finished
		初始化.语法糖消耗物品("蓝图纸",研究费用)
		var 蓝图名称=梅表格.装备蓝图[蓝图池[0]][0]
		if 对照数组[奖品]=="残缺蓝图":
			%"研究配方贴图".texture=load(梅表格.装备蓝图[蓝图池[0]][icon])
			%研究配方名.text = "残缺"+str(梅表格.装备蓝图[蓝图池[0]][0])
			var 残缺蓝图碎片等级=初始化.梅存档["手工"].get(蓝图名称+"碎片", 0)
			if 残缺蓝图碎片等级==0:
				初始化.梅存档["手工"][蓝图名称+"碎片"]=1
				引擎.屏幕.滚动提示( "首次获得残缺蓝图<"+蓝图名称+">#残缺图纸制作后概率报废","手工提示")
			elif 残缺蓝图碎片等级<5:
				初始化.梅存档["手工"][蓝图名称+"碎片"]=残缺蓝图碎片等级+1
				引擎.屏幕.滚动提示( "获得残缺蓝图<"+蓝图名称+">+1数量("+str(残缺蓝图碎片等级)+")","手工提示")
			else :
				var 蓝图阶级=int(梅表格.获取表格信息(梅表格.装备蓝图,蓝图名称,"阶级"))
				初始化.语法糖获得物品("蓝图纸",6+蓝图阶级)
				引擎.屏幕.滚动提示("残缺蓝图<"+蓝图名称+">已超出上限","手工提示")
		elif 对照数组[奖品]=="装备蓝图":
			%"研究配方贴图".texture=load(梅表格.装备蓝图[蓝图池[0]][icon])
			%研究配方名.text = "新蓝图"+str(梅表格.装备蓝图[蓝图池[0]][0])
			获得蓝图(蓝图名称,true)
			初始化.结算升级("手工","灵感等级")
		elif 对照数组[奖品]=="特殊蓝图":
			var 特殊图纸等级
			var 索引序号 = -1  # 初始化-1表示"未找到"
			蓝图名称 = null  # 初始化蓝图名称
			for 蓝图索引 in 蓝图池:
				蓝图名称 = 梅表格.装备蓝图[蓝图索引][0]
				特殊图纸等级 = 初始化.梅存档["手工"].get(蓝图名称, 0)
				if 特殊图纸等级 == 0:
					索引序号 = 蓝图索引  # 记录找到的索引
					print(蓝图名称)
					break  # 找到后立即退出循环
			if 索引序号 == -1:
				初始化.语法糖获得物品("黄图纸", 20)
				引擎.屏幕.滚动提示("所有解锁的特殊图纸均已获得", "手工提示")
				%研究配方名.text = "特殊奖励已全部获得"
			else:
				%"研究配方贴图".texture = load(梅表格.装备蓝图[索引序号][icon])
				%研究配方名.text = "特殊" + str(蓝图名称)
				初始化.梅存档["手工"][蓝图名称] = 1
		else :
			print("获得蓝图包:"+蓝图包)
			%"研究配方贴图".texture=load(梅表格.装备蓝图[蓝图池[0]][icon])
			%研究配方名.text = str(蓝图包)+"包"
			for 蓝图索引 in 蓝图池:
				蓝图名称=梅表格.装备蓝图[蓝图索引][0]
				获得蓝图(蓝图名称)
			引擎.屏幕.滚动提示( "获得<"+蓝图包+">蓝图包","手工提示")
			初始化.结算升级("手工","灵感等级")
		if randf()<=费用概率/100.0:
			引擎.屏幕.滚动提示( "研究费用增加","研究费用")
			研究费用+=10
			if 研究费用>160:
				研究费用=160
			if not 初始化.时间戳字典.has("研究时间戳"):
				初始化.时间戳字典["研究时间戳"]=int(Time.get_unix_time_from_system())
			初始化.梅存档["手工"]["研究费用"]=研究费用
		if 对照数组[奖品]=="残缺蓝图":
			%"蓝色图纸".texture=load("res://素材/豆包AI素材/残缺图纸.png")
			%蓝图属性.text=初始化.预生成文本(蓝图池[0])
		elif 对照数组[奖品]=="特殊蓝图":
			%"蓝色图纸".texture=load("res://素材/豆包AI素材/特殊图纸.png")
			%蓝图属性.text="特殊图纸"
		else :
			%蓝图属性.text=初始化.预生成文本(蓝图池[0])
			%"蓝色图纸".texture=load("res://素材/豆包AI素材/蓝色图纸.png")
		if 对照数组[奖品]=="蓝图包":
			动画包显示支持数组=蓝图池
			动画显示页码=0
			%"切换按钮节点".visible=true
		else:
			%"切换按钮节点".visible=false
		%"蓝图图片".应用纹理(%"研究配方贴图".texture)
		%动画.play("研究")
	else :
		引擎.屏幕.滚动提示( "蓝图纸不足","手工提示")
	%研究进度条.更新进度(-1)
	初始化.保存存档()
	富文本()
	研究中=false
func 抽卡精通(等级: int,等阶: int,重复=true):
	if 重复:
		return 等级 * (1.25 ** 等阶) + 100# 每次抽卡获得的精通
	return int(等阶**1.2) * 100
func 获得蓝图(蓝图名称,提示=false):
	var 蓝图精通等级=初始化.梅存档["手工"].get(蓝图名称, 0)
	var 蓝图阶级=int(梅表格.获取表格信息(梅表格.装备蓝图,蓝图名称,"阶级"))
	if 蓝图精通等级==0:
		var 灵感的精通=抽卡精通(蓝图精通等级,蓝图阶级,false)
		初始化.梅存档["手工"]["灵感等级精通"]=灵感等级精通+灵感的精通
		初始化.梅存档["手工"][蓝图名称]=1
		if 提示:
			引擎.屏幕.滚动提示( "恭喜获得新蓝图<"+蓝图名称+">灵感值增加:"+str(灵感的精通),"手工提示")
	else :
		var 灵感的精通=抽卡精通(蓝图精通等级,蓝图阶级)
		初始化.梅存档["手工"]["灵感等级精通"]=灵感等级精通+灵感的精通
		初始化.语法糖获得物品("蓝图纸",8*(6+蓝图阶级))
		初始化.语法糖获得物品("黄图纸",蓝图阶级)
		if 提示:
			引擎.屏幕.滚动提示( "蓝图<"+蓝图名称+">已重复获得转化为灵感值:"+str(灵感的精通),"手工提示")
func 筛选符合条件蓝图(分类: Array = [], 类型: Array = [], 职业: Array = [], 阶级: Array = [], 图纸集: Array = []) -> Array:
	var 符合条件的序号 = []
	var 装备蓝图数组 = 梅表格.装备蓝图
	# 检查是否有数据
	if 装备蓝图数组.size() < 2:
		return 符合条件的序号  # 没有数据或只有表头
	var 表头 = 装备蓝图数组[0]# 获取表头行
	var 分类索引 = 表头.find("分类")# 从表头获取各属性的索引
	var 类型索引 = 表头.find("类型")
	var 职业索引 = 表头.find("职业")
	var 阶级索引 = 表头.find("阶级")
	var 图纸集索引 = 表头.find("图纸集")
	for i in range(1, 装备蓝图数组.size()):# 从索引1开始遍历实际装备数据
		var 当前装备 = 装备蓝图数组[i]
		var 满足条件 = true
		# 检查分类条件（如果找到了对应的索引且有筛选条件）
		if 分类.size() > 0 and 分类索引 != -1:
			if not 分类.has(当前装备[分类索引]):
				满足条件 = false
		# 检查类型条件
		if 满足条件 and 类型.size() > 0 and 类型索引 != -1:
			if not 类型.has(当前装备[类型索引]):
				满足条件 = false
		# 检查职业条件
		if 满足条件 and 职业.size() > 0 and 职业索引 != -1:
			if not 职业.has(当前装备[职业索引]):
				满足条件 = false
		# 检查阶级条件
		if 满足条件 and 阶级.size() > 0 and 阶级索引 != -1:
			if not 阶级.has(当前装备[阶级索引]):
				满足条件 = false
		# 检查图纸集条件
		if 满足条件 and 图纸集.size() > 0 and 图纸集索引 != -1:
			if not 图纸集.has(当前装备[图纸集索引]):
				满足条件 = false
		# 如果所有条件都满足，添加序号到结果
		if 满足条件:
			符合条件的序号.append(i)
	return 符合条件的序号
func 测试抽奖(概率数组: Array):
	var 结果数组 = [0]
	for i in 概率数组:
		结果数组+=[0]
	for i in range(1000):
		# 记录每次抽奖结果
		var 结果 = 抽奖(概率数组)
		结果数组[结果] += 1
	print(结果数组)
func 抽奖(概率数组: Array) -> int:
	# 验算所有概率之和是否小于1
	var 总概率 = 0.0
	for 概率 in 概率数组:
		总概率 += 概率
	if 总概率 >= 1.0:
		push_error("所有概率之和必须小于1，当前总和为: ", 总概率)
		return -1  # 返回-1表示出错
	# 生成0到1之间的随机数
	var 随机数 = randf()  # randf()返回[0, 1)之间的随机浮点数
	var 累计概率 = 0.0
	# 依次判断每个概率
	for i in 概率数组.size():
		累计概率 += 概率数组[i]
		if 随机数 < 累计概率:
			return i  # 返回当前循环次数（索引）
	# 所有判断都失败，返回总次数
	return 概率数组.size()
func 设置动画(值):
	if 值:
		%蓝色图纸.visible=值
	研究动画播放中=值
func _关闭蓝图展示() -> void:
	%蓝色图纸.visible=false
func _蓝图下一页() -> void:
	if 动画显示页码<动画包显示支持数组.size()-1:
		动画显示页码+=1
	%蓝图属性.text=初始化.预生成文本(动画包显示支持数组[动画显示页码])
	%"蓝图图片".应用纹理(load(梅表格.装备蓝图[动画包显示支持数组[动画显示页码]][icon]))
func _蓝图上一页() -> void:
	if 动画显示页码>0:
		动画显示页码+=-1
	%蓝图属性.text=初始化.预生成文本(动画包显示支持数组[动画显示页码])
	%"蓝图图片".应用纹理(load(梅表格.装备蓝图[动画包显示支持数组[动画显示页码]][icon]))
