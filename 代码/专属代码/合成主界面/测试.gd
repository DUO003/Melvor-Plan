extends TextureButton
var 测试
var 功能列表 = ["获取装备", "刷新商店", "手工熟练度", "测试金币","测试图纸","手工资源获取","副本-生成敌人"]
var 下拉菜单
func _ready():
	# Godot 4.x 信号连接语法
	connect("pressed", Callable(self, "测试按钮"))
	下拉菜单 = $测试功能
	下拉菜单.clear()
	for 功能名称 in 功能列表:
		下拉菜单.add_item(功能名称)
	下拉菜单.item_selected.connect(func(_序号):print("测试功能选择:",下拉菜单.text))
func 测试按钮():
	var 文本=$测试功能.text
	print("当前选中的测试功能：", 文本)
	if 文本=="获取装备":
		var 随机装备数组=["标准剑","标准盾","标准头盔","标准重甲","标准腿甲","标准鞋子","青铜剑","铁剑"]
		var 随机索引 = randi() % 随机装备数组.size()
		初始化.获得物品语法糖(随机装备数组[随机索引],1,"装备物品")
	elif 文本=="刷新商店":
		初始化.商店刷新()
	elif 文本=="手工熟练度":
		初始化.梅存档["手工"]["熟练"]+=1000
		初始化.结算升级("手工")
	elif 文本=="测试金币":
		初始化.梅存档["金币"]+=10000
		初始化.emit_signal("更新_UI")
	elif 文本=="测试图纸":
		初始化.获得物品语法糖("蓝图纸",1600)
	elif 文本=="手工资源获取":
		初始化.获得资源("木材", 100, true, false)
		初始化.获得资源("矿石", 100, true, false)
		初始化.获得资源("皮革", 100, true, false)
		初始化.获得资源("药草", 100, true, false)
		初始化.emit_signal("更新_UI")
	elif 文本=="副本-生成敌人":
		if 初始化.节点.has("战斗副本节点"):
			if is_instance_valid(初始化.节点["战斗副本节点"]):
				初始化.节点["战斗副本节点"].生成敌人()
	else :
		return
	初始化.保存存档()
	#GBIS.inventory_service.消耗指定数量物品("背包","蓝图纸",10)
	#初始化.零点检测()
	#初始化.梅存档["手工"]["熟练"]+=1000
	#初始化.时间戳字典["手工熟练"]+=-300
	#print("当前场景根节点名称: ", 初始化.节点["合成界面"].name)

	#初始化.调试精通()
	#初始化.获得物品语法糖("标准剑",5,"标准物品")
	#调试物品字典()
	#测试=初始化.初始化装备("标准盾")
	#print("测试",测试)
	#测试.属性测试()
	#测试=初始化.初始化装备("铁剑")
	#print("测试",测试)
	#测试.属性测试()
	#
	#初始化.玩家单例.打印属性()
	#var 剩余秒数 = int(初始化.商店刷新计时器.time_left)
	#var 格式化时间文本 = 初始化.格式化时间(剩余秒数)
	#print("商店刷新剩余时间：", 格式化时间文本)
	#初始化.保存存档()
	#初始化.emit_signal("更新_UI")# 发送UI更新信号


func 打印字典内容(字典:Dictionary)-> void:
	for 键 in 字典:
		print ("键:", 键,"，值:", 字典 [键])


func 调试物品字典() -> void:
	# 打印字典基本信息（使用repeat方法替代*运算符）
	print("=".repeat(60))
	print("初始化.物品字典 调试信息 - 共 %d 个物品" % 初始化.物品字典.size())
	print("=".repeat(60))
	
	# 遍历物品字典
	for 物品键 in 初始化.物品字典:
		var 物品数据 = 初始化.物品字典[物品键]
		print("\n【物品键】: %s" % 物品键)
		print("【物品名称】: %s" % 物品数据.item_name)
		print("-".repeat(50))
		
		# 获取并打印物品的所有属性
		var 属性列表 = 物品数据.get_property_list()
		for 属性 in 属性列表:
			var 属性名 = 属性.name
			# 过滤内部属性和信号
			if 属性名.begins_with("_") or 属性.type == TYPE_SIGNAL:
				continue
			
			# 打印属性名和值
			var 属性值 = 物品数据.get(属性名)
			print("%-20s: %s" % [属性名, 属性值])
	
	# 调试结束标记
	print("\n" + "=".repeat(60))
	print("初始化.物品字典 调试完成")
	print("=".repeat(60))
